class MyHashSet:

    def __init__(self):
        self.size=100000
        self.lst=[None]*self.size
        
    def hash_value(self,key):
        return key % self.size
        

    def add(self, key: int) -> None:
        hv = self.hash_value(key)
        if self.lst[hv] == None:
            self.lst[hv]=[key]
        else:
            self.lst[hv].append(key)

    def remove(self, key: int) -> None:
        hv = self.hash_value(key)
        if self.lst[hv] != None:
            while key in self.lst[hv]:
                self.lst[hv].remove(key)

    def contains(self, key: int) -> bool:
        hv = self.hash_value(key)
        if self.lst[hv] != None:
            return key in self.lst[hv]
        else:
            return False
        


# Your MyHashSet object will be instantiated and called as such:
# obj = MyHashSet()
# obj.add(key)
# obj.remove(key)
# param_3 = obj.contains(key)
